<?xml version="1.0" encoding="UTF-8"?>
<!-- - DispatcherServlet application context for Application's web tier. -->
<!-- 
	xsi:schemaLocation 설정시 주의사항 
	xsd설정시 반드시 상위 폴더명을 추가로 지정해 주어야 한다. 
	ex)
	http://www.springframework.org/schema/mvc(xsd파일이 들어있는 폴더)
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd(실제 xsd)
	
	xsd파일이 들어있는 폴더가 지정되지 않았을 경우 서버 기동시
	cvc-complex-type.2.4.c: 일치하는 와일드 카드 문자가 엄격하게 적용되지만 '~' 요소에 대한 선언을 찾을 수 없습니다. 에러가 발생
	
	bean 설정시 xmlns가 보이는데 이는 namespace를 설정하는 부분으로 xsi:schemaLocation에서 지정한 xsd를 사용하기 위해서 앞에 사용할 접두사를 지정한다.
	ex)
	xmlns="http://www.springframework.org/schema/beans"
	beans기능을 접두사 없이 사용한다 -> <beans></beans>로 사용가능
	
	xmlns:context="http://www.springframework.org/schema/context"
	context기능을 접두사 context를 붙여서 사용한다 예를 들어 component-scan기능을 사용하려면
	<context:component-scan> 처럼 사용
	
	xmlns를 지정하지 않으면 xsi:schemaLocation에서 지정한 기능을 사용할수 없으므로 주의할것
 -->
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
						http://www.springframework.org/schema/util
						http://www.springframework.org/schema/util/spring-util-3.2.xsd
						">
	
	<!-- - The controllers are autodetected POJOs labeled with the @Controller annotation. -->
	<context:component-scan base-package="egovframework">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository" />
	</context:component-scan>
	
	<!-- 
		dispatherSerlvet-> HandlerMapping -> HandlerExecutionChain 설정
		요청시 이부분에서 HandlerExecutionChain이 정해지지 않으면 오류가 발생한다.
		
		HanderMapping <-> HandlerAdapter는 서로 대응하는 클래스가 있기때문에 맞지않는 클래스를 정의하면 url호출시 오류가 발생한다.
		org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping
		org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
	-->
	
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	
	<!-- 
		Controller호출시 binding 되는 파라메터를 property-editor,converter등을 이용하여 자동으로 형변환 및 formatting을 진행하는 bean 지정
		여기에서 바로 converter나 property-editor 설정을 가진 bean을 지정할 수도 있고 아래 처럼 class를 따로 구성하여 bean을 지정할 수도 있다.
		
		[파라메터가 binding되는 기준]
		html -> Controller 진행시 @ModelAttribute를 이용하여 input의 값을 VO로 자동 mapping
		html 에서 <form:form commandName="vo명"> ~ </form:form>으로 지정한 VO를 Controller 파라메터로 지정
		html -> Controller 진행시 @RequestParam 을 이용하여 파라메터를 가져올때 
	-->
	<!-- 
		HandlerAdapter 설정
		요청 -> dispatcherServlet->HandlerExecutionChain결정 -> HandlerAdapter실행후 View가 보여진다.
		org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
		org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter
	-->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class="egovframework.example.cmmn.web.EgovBindingInitializer" />
		</property>
		
		<!--
			json반환시 한글이 깨지는 문제 수정처리
			아래방법은 AnnotationMethodHandlerAdapter가 선언되어 있을 때 사용가능한 방법이며
			spring 3.2부터는 AnnotationMethodHandlerAdapter가 deprecated 되었기 때문에 
			아래 message Converter부분을 지정해야 함
		-->
		<property name="messageConverters">
			<array>
				<bean class = "org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes" value = "text/plain;charset=UTF-8" />
				</bean>
			</array>
		</property>
	</bean>
	
	<!-- @Valid 어노테이션을 사용하려면 보통 <mvc:annotation-driven/>을 선언하나 기존 설정과 충돌하여 사용하지 못할 경우에는 Validator만 따로 선언하여 webBindingInitializer에 지정한다.-->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	 
	
	<!-- Converter Config -->
	
	<!-- 웹에서는 아래 bean을 설정해 주어야 한다고하는데 지정하지 않아도 동작하는데에는 문제가 없음
	<bean id="webBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
		<property name="conversionService" ref="conversionService"/>
		<beans:property name="validator" ref="validator" />
	</bean>
	-->
	
	<!-- 
		convert 클래스를 지정 set안에 여러개의 converter를 등록할 수 있다.
		converter만 등록시에는 org.springframework.context.support.ConversionServiceFactoryBean을 지정하고
		formatter까지 같이 지정하려면 org.springframework.format.support.FormattingConversionServiceFactoryBean을 지정
		
		사용자 정의 formatter를 이용하려면
		<property name="formatters"></property>에 converters와 동일하게 bean을 지정
	-->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="egovframework.example.util.MultipartFileToFileVOConverter"/>
			</set>
		</property>
	</bean>
	
	<!-- /Converter Config -->
	
	<!-- message Converter -->
	
	<!-- spring 3.1이상에서 사용하는 방법 
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<util:list list-class="java.util.ArrayList">
				<ref bean="mappingJackson2HttpMessageConverter"/>
				<ref bean="stringhttp2"/>
			</util:list>
		</property>
		</bean>
		<bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
		</bean>
	-->
	<!-- /message Converter -->

	

	<!-- - This bean resolves specific types of exceptions to corresponding logical - view names for error views. The default 
		behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container: this will happen - here with all 
		other types of exceptions.
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="cmmn/bizError" />
		<property name="exceptionMappings">
			<props>
				<prop key="org.springframework.dao.DataAccessException">cmmn/dataAccessFailure</prop>
				<prop key="org.springframework.transaction.TransactionException">cmmn/transactionFailure</prop>
				<prop key="egovframework.rte.fdl.cmmn.exception.EgovBizException">cmmn/bizError</prop>
				<prop key="org.springframework.security.AccessDeniedException">cmmn/accessDenied</prop>
			</props>
		</property>
	</bean>
	 -->
	<!--
		RequestToViewNameTranslator 지정
		Handler에서 view이름 또는 view구현체를 반환하지 않을경우 view를 알아서 지정
		
		http://localhost/member/insert/form.do -> member/insert/form.html
		
		viewResolver를 따로 지정하지 않는 경우에는 RequestToViewNameTranslator에 prefix,suffix를 지정할 필요가 있으나 viewResolver를 사용하면 viewResolver의 
		prefix,suffix를 사용한다.
		
		RequestToViewNameTranslator가 발동되는 조건은(org.springframework.web.servlet.DispatcherServlet 기준)
		1.ModelAndView가 null이 아니고
		2.ModelAndView에 view정보가 존재하지 않아야 한다.
		
		즉 ModelAndView가 null을 반환하게 되면 RequestToViewNameTranslator가 작동하지 않게 된다.
		ModelAndView를 반환하는건 HandlerAdapter에서 담당하므로 HandlerAdapter에서 어떻게 반환하느냐에 따라서 구현전략이 달라진다.
		
		ex)AnnotationMethodHandlerAdapter
		-> controller에서 void type 지정 : ModelAndView를 null로 반환하므로 RequestToViewNameTranslator가 작동하지 않는다.
		
	-->
	<bean id="viewNameTranslator" class="org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator"/>
	
	<!--
		view resolver
		Controller에서 return하는 view가 문자열일 경우 view resolver에서 문자열에 해당하는 view를 검색하고 view를 반환하게 된다.
		view resolver에서 view를 찾지 못했을 경우에는 ServletException이 발생함
	 -->
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="1"
		p:viewClass="org.springframework.web.servlet.view.JstlView" p:prefix="/WEB-INF/jsp/egovframework/example/" p:suffix=".jsp" />

	<!-- - Message source for this context, loaded from localized "messages_xx" files. - Could also reside in the root application 
		context, as it is generic, - but is currently just used within Application's web tier. 
		<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" 
		p:basename="messages"/> -->


	<!-- For Pagination Tag -->
	<bean id="imageRenderer" class="egovframework.example.cmmn.web.EgovImgPaginationRenderer" />

	<bean id="paginationManager" class="egovframework.rte.ptl.mvc.tags.ui.pagination.DefaultPaginationManager">
		<property name="rendererType">
			<map>
				<entry key="image" value-ref="imageRenderer" />
			</map>
		</property>
	</bean>
	<!-- /For Pagination Tag -->
	
	<!-- File Upload -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000"/>
		<property name="maxInMemorySize" value="100000"/>
		<property name="defaultEncoding" value="utf-8"/>
	</bean>
	
	
	<!-- /File Upload -->
	
	<!-- Interceptor -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/sample/addSample.do"/>
			<mvc:mapping path="/sample/updateSample.do"/>
			<bean id="RefererInterceptor" class="egovframework.example.cmmn.interceptor.RefererInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- /Interceptor -->
	
	
</beans>