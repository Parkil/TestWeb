<?xml version="1.0" encoding="UTF-8"?>
<!-- spring security 설정파일 -->
<bean:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:bean="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security-3.2.xsd
						">
						
	<http pattern="/**/*.js" security="none"/>
	<http pattern="/**/*.css" security="none"/>
	<http pattern="/images/*" security="none"/>
	
	<!--
		intercept-url 지정시 주의점
		구체적인 URL을 먼저 설정하고 덜 구체적인 패턴을 나중에 설정해야 함
		ex)
		-> 은 왼쪽조건을 먼저 설정하고 그다음 오른쪽 조건을 설정한다는 의미
		
		/** -> /admin/** : 먼저지정한 /**에서 조건이 설정되어 버리기 때문에 /admin/** 조건이 제대로 걸리지 않는다.
		/admin/** -> /** : 정상적으로 작동함
		
		로그인하지 않은사람만 봐야 하는 페이지의 경우에는 ROLE_ANONYMOUS로 지정
	-->
	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/index.jsp" access="permitAll"/>
		<intercept-url pattern="/login.do"  access="permitAll"/>
		<intercept-url pattern="/admin/**"  access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
		
		<!--
			커스텀 로그인 화면 지정
			username-parameter  		: id값을 저장할 input id
			password-parameter  		: password 값을 저장할 input id
			login-page					: 로그인페이지 url
			default-target-url  		: 인증성공시 표시할 url
			authentication-failure-url  : 인증실패시 url
		-->
		<form-login
			username-parameter="id"
			password-parameter="pw"
			login-page="/login.do"
			default-target-url="/sample/egovSampleList.do"
			authentication-failure-url="/login.do?fail=true"
			authentication-success-handler-ref="customSuccessHandler"
		/>
		
		<!--
			커스텀 로그아웃 지정
			delete-cookies		: 로그아웃시 삭제할 cookie 정보
			logout-success-url	: 로그아웃성공시 이동할 url
			logout-url			: 로그아웃 url지정(미 지정시 /j_spring_security_logout  로 기본지정)
		-->
		<logout
			delete-cookies="JSESSIONID"
			logout-success-url="/login.do"
			logout-url="/logout.do"
		/>
		
		<session-management>
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/>
		</session-management>
	</http>
	
	<authentication-manager>
		<!-- ID,PW를 xml에 하드코딩으로 넣는 방식
		<authentication-provider>
			<user-service>
				<user name="user" password="user" authorities="ROLE_USER"/>
				<user name="admin" password="admin" authorities="ROLE_ADMIN"/>
			</user-service>
		</authentication-provider>
		-->
		
		<!-- ID,PW를 따로 정의한 Bean에서 가져오도록 처리하는 방식 -->
		<authentication-provider user-service-ref="customJdbcDaoImpl"/>
	</authentication-manager>
	
	<!-- 
		사용자 및 권한을 DB에서 가져오기 위한 Custom bean 지정
		dataSource : context-datasource에서 지정된 datasource명
		rolePrefix : 권한 앞에 붙는 전치어
		usersByUsernameQuery : spring-security에서 사용하는 계정정보를 가져오는데 사용되는 SQL
		authoritiesByUsernameQuery : spring-security에서 사용하는 권한정보를 가져오는데 사용되는 SQL
		enableGroups : 권한그룹 허용여부
	-->
	<bean:bean id="customJdbcDaoImpl" class="egovframework.spring.security.CustomJdbcDaoImpl">
		<bean:property name="dataSource" ref="dataSource"/>
		<bean:property name="rolePrefix" value=""/>
		<bean:property name="usersByUsernameQuery" value="select id,password,name from memberinfo where id=?"/>
		<bean:property name="authoritiesByUsernameQuery" value="select authority from member_authority where id=?"/>
		<bean:property name="enableGroups" value="false"/>
	</bean:bean>
	
	<!-- 로그인성공 Cutom Handler Bean(AuthenticationSuccessHandler 인터페이스를 구현해야 함) -->
	<bean:bean id="customSuccessHandler" class="egovframework.spring.security.CustomSuccessHandler">
	</bean:bean>
</bean:beans>